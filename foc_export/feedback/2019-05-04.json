[
    {
        "client_msg_id": "bc9e68ec-f9ce-49f1-a549-eabcf9faf9f3",
        "type": "message",
        "text": "<@UCUSW7WVD> yes, that is interesting: purity vs pragmatism. Designers often make strange contortions in the name of purity. The \"cycle report\" is very pragmatic, but purist will consider the model \"broken\". It's a \"worse is better\" solution :slightly_smiling_face:",
        "user": "UHDQ62M4P",
        "ts": "1556980994.016200",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556901860.014800",
        "parent_user_id": "UHDQ62M4P"
    },
    {
        "client_msg_id": "cf2dd85d-0d0f-4873-85b7-abfb49469032",
        "type": "message",
        "text": "Was reading <http:\/\/akkartik.name\/about>, and in relation to how hard it is to remove\/refactor code\/features as a code base evolves, I think one of my other projects is relevant: <http:\/\/strlen.com\/restructor\/> This assumes that besides the reasons you mention, that refactoring is simply hard and scary for humans (what will break if I remove this? better leave it in), so that it is better done by machine.",
        "user": "UHDQ62M4P",
        "ts": "1556998003.016400",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556901860.014800",
        "parent_user_id": "UHDQ62M4P"
    },
    {
        "client_msg_id": "0141122e-66fe-4758-9bee-7a547f215e01",
        "type": "message",
        "text": "Most interesting. I’m familiar with <http:\/\/strlen.com|strlen.com> but hadn’t seen this project somehow.\n\nMy approach so far has been in the direction of making refactoring less scary rather than automating it. I will mull your approach. My first reaction from reading two screenfuls: refactoring is not always the same as compression, and so a tool may end up making tasteless transformations. But this is just an initial knee-jerk reaction. Continuing to read.",
        "user": "UCUSW7WVD",
        "ts": "1556999102.016600",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1556999181.000000"
        },
        "thread_ts": "1556901860.014800",
        "parent_user_id": "UHDQ62M4P"
    },
    {
        "client_msg_id": "f1c4de37-b934-4a4d-be2f-f56a0f8c2ba5",
        "type": "message",
        "text": "yup, you are right.. the page also discusses plenty of downsides :slightly_smiling_face:",
        "user": "UHDQ62M4P",
        "ts": "1556999476.016900",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556901860.014800",
        "parent_user_id": "UHDQ62M4P"
    },
    {
        "client_msg_id": "848c2c9b-aea0-44b5-9b2e-8d2bedd9a94f",
        "type": "message",
        "text": "In your quoted post, I am not sure what you are referring to with \"copy code from one codebase to another\" and in particular \"working with multiple runtimes\" (language runtimes?)",
        "user": "UHDQ62M4P",
        "ts": "1556999578.017100",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556901860.014800",
        "parent_user_id": "UHDQ62M4P"
    },
    {
        "client_msg_id": "a8506527-45cb-49c8-abf4-8cae1867d5d2",
        "type": "message",
        "text": "I think the syntax for only allowing a refc of 1 will be a var\/field annotation, so something like `let owned a = ...`, though maybe I can think of something less verbose. Or maybe verbose is ok since I predict its use will be rare :slightly_smiling_face:",
        "user": "UHDQ62M4P",
        "ts": "1556999676.017300",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556901860.014800",
        "parent_user_id": "UHDQ62M4P"
    },
    {
        "client_msg_id": "3b63fb80-c989-4cb8-bd6a-830e15f1ddb6",
        "type": "message",
        "text": "My non-standard use of `struct`.. this is actually borrowed from C#, which does the same thing. In fact it is the most mainstream precedent of distinquishing inline types per struct decl, as e.g. C++ does it on a per value\/variable level",
        "user": "UHDQ62M4P",
        "ts": "1556999781.017500",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556901860.014800",
        "parent_user_id": "UHDQ62M4P",
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "55c80bda-5eea-45f2-aa7c-23c616b4c801",
        "type": "message",
        "text": "yes, `struct` is meant to contain class or vector references, though that is currently disabled while I work out the consequences",
        "user": "UHDQ62M4P",
        "ts": "1556999828.017700",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556901860.014800",
        "parent_user_id": "UHDQ62M4P"
    },
    {
        "client_msg_id": "fc3e1d99-3a19-4ed3-a69b-6e6559b5d1b0",
        "type": "message",
        "text": "There are indeed a couple of places where this will be tricky",
        "user": "UHDQ62M4P",
        "ts": "1556999900.017900",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556901860.014800",
        "parent_user_id": "UHDQ62M4P"
    },
    {
        "client_msg_id": "3004c142-35b6-47a3-ba90-9e69a603fef9",
        "type": "message",
        "text": "though in my case it shouldn't require expensive runtime checks",
        "user": "UHDQ62M4P",
        "ts": "1556999919.018100",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556901860.014800",
        "parent_user_id": "UHDQ62M4P"
    },
    {
        "client_msg_id": "c720dd13-5afb-4f06-9417-698c759b8cbc",
        "type": "message",
        "text": "I think Nim (linked from my doc) essentially will have a runtime use after free check",
        "user": "UHDQ62M4P",
        "ts": "1556999985.018300",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556901860.014800",
        "parent_user_id": "UHDQ62M4P"
    },
    {
        "client_msg_id": "41988bf1-5c6f-4348-9f3f-da84c1d7aada",
        "type": "message",
        "text": "I did see this idea of allocation ids before.. do you have references which languages use these?",
        "user": "UHDQ62M4P",
        "ts": "1557000276.018500",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556901860.014800",
        "parent_user_id": "UHDQ62M4P"
    },
    {
        "client_msg_id": "88652bbb-218c-4495-adcb-e7c04d62bf96",
        "type": "message",
        "text": "No languages, to my knowledge. I got the idea from reading some academic literature: <http:\/\/www.cis.upenn.edu\/acg\/papers\/ismm10_cets.pdf> (There’s a lot more there because they care about compatibility, but the alloc ids are the essence of the idea.)\n\n(I found this paper via <https:\/\/www.cs.kent.ac.uk\/people\/staff\/srk21\/\/research\/papers\/kell17some-preprint.pdf>)",
        "user": "UCUSW7WVD",
        "ts": "1557001793.018800",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556901860.014800",
        "parent_user_id": "UHDQ62M4P"
    },
    {
        "client_msg_id": "abc6464f-dc32-4e54-b3a0-ff33a2de0cc2",
        "type": "message",
        "text": "Ah cool, thanks",
        "user": "UHDQ62M4P",
        "ts": "1557002283.019000",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556901860.014800",
        "parent_user_id": "UHDQ62M4P"
    },
    {
        "client_msg_id": "5c3612ef-450c-4495-a785-4c83314b4e88",
        "type": "message",
        "text": "&gt; In <https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1536959125000100?thread_ts=1532963038.000621&amp;cid=C5T9GPWFL> I am not sure what you are referring to with “copy code from one codebase to another” and in particular “working with multiple runtimes” (language runtimes?)\n\nIndeed. Basically I love the tactile feel of a codebase in my mind as I get into it, and I love that there’s lots of programs out there that make their sources available for me to construct “mind palaces” out of. But I’m frustrated that each codebase is isolated, and I can’t easily copy what I learn and appreciate from one program to another. Without it being stressful as you pointed out that I’m going to break something in the destination, and that I don’t really understand everything that needs to come along for the ride from the source.\n\nThe old ideal of ‘reuse’ is to achieve this without actually messing with the internals of the thing being copied. The metaphor everyone seems to like is that ‘components’ should be like blocks, and it should be easy to take a block out of one codebase and add it to another. But a) this doesn’t seem to have worked in spite of lots of attempts, and b) mindlessly putting blocks together takes all the fun out of programming for me :slightly_smiling_face: Fortunately for us all, reuse isn’t automatable so far. I’d like for “copying what you like” to be humanly tractable. (<http:\/\/paulgraham.com\/copy.html>)",
        "user": "UCUSW7WVD",
        "ts": "1557002367.019200",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "from_url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1536959125000100?thread_ts=1532963038.000621&amp;cid=C5T9GPWFL",
                "fallback": "[September 14th, 2018 2:05 PM] ak: My rant on this is that we programmers need to replace our obsession with programming languages with an obsession for runtimes[1]. The runtime is the car, the language is the color of the bumper.\n\nFor me the big problem boils down to making it easy to copy code from one codebase to another, and have confidence when you're done that you didn't cause any regressions.\n\nIf you can do this, working with multiple runtimes becomes a lot more tractable.\n\n(Avoiding bugs is a separate problem. As is coming up with the ideal architecture for a codebase. Both these seem about as solvable as world peace. But making codebases more malleable seems like the most ambitious problem we can work on that actually may admit a solution.)\n\n[1] This may not be the best thing I've written on the subject, but it's something: <https:\/\/news.ycombinator.com\/item?id=10397026#10397931>",
                "ts": "1536959125.000100",
                "author_id": "UCUSW7WVD",
                "author_subname": "Kartik Agaram",
                "channel_id": "C5T9GPWFL",
                "channel_name": "general",
                "is_msg_unfurl": true,
                "is_reply_unfurl": true,
                "text": "My rant on this is that we programmers need to replace our obsession with programming languages with an obsession for runtimes[1]. The runtime is the car, the language is the color of the bumper.\n\nFor me the big problem boils down to making it easy to copy code from one codebase to another, and have confidence when you're done that you didn't cause any regressions.\n\nIf you can do this, working with multiple runtimes becomes a lot more tractable.\n\n(Avoiding bugs is a separate problem. As is coming up with the ideal architecture for a codebase. Both these seem about as solvable as world peace. But making codebases more malleable seems like the most ambitious problem we can work on that actually may admit a solution.)\n\n[1] This may not be the best thing I've written on the subject, but it's something: <https:\/\/news.ycombinator.com\/item?id=10397026#10397931>",
                "author_name": "Kartik Agaram",
                "author_link": "https:\/\/futureofcoding.slack.com\/team\/UCUSW7WVD",
                "author_icon": "https:\/\/avatars.slack-edge.com\/2018-09-14\/435669206004_3ed0e6ac6eafe8bcf338_48.jpg",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1536959125000100?thread_ts=1532963038.000621&amp;cid=C5T9GPWFL",
                "footer": "From a thread in #general"
            }
        ],
        "thread_ts": "1556901860.014800",
        "parent_user_id": "UHDQ62M4P"
    },
    {
        "client_msg_id": "2d0d6d73-d189-4add-aa10-965a5a59fe31",
        "type": "message",
        "text": "Yup, black-box components were a pipe dream.. copy, paste, and wiggle until it fits is all we have. I can't even picture a better solution given the diversity of ways of expressing things in code we have",
        "user": "UHDQ62M4P",
        "ts": "1557002807.019500",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556901860.014800",
        "parent_user_id": "UHDQ62M4P",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "ec04432f-71a2-4aa0-abb0-8eb3ca99cbbf",
        "type": "message",
        "text": "Currently if you ask 100 random programmers to implement even a medium-complexity bit of software you'll end up with 100 wildly different code bases that have entirely incompatible structures. This \"phenomenon\" lies at the root of the problem why code reuse will never be plug and play. Or put the other way around, if you value this \"code compatibility\" above all else, your first step is to prioritize \"there's only one way to do it\" above all else in language design, such that those 100 code bases become more and more the same.. then your reuse will become likely easier too",
        "user": "UHDQ62M4P",
        "ts": "1557002994.019700",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "edited": {
            "user": "UHDQ62M4P",
            "ts": "1557003047.000000"
        },
        "thread_ts": "1556901860.014800",
        "parent_user_id": "UHDQ62M4P"
    },
    {
        "client_msg_id": "bd6ce28c-8bf2-4187-90ae-80bd32bce6ee",
        "type": "message",
        "text": "I have no idea how you'd do that though.. likely using a language that is extremely limited in its code structures and data structures, such as an APL-alike",
        "user": "UHDQ62M4P",
        "ts": "1557003108.020000",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556901860.014800",
        "parent_user_id": "UHDQ62M4P"
    },
    {
        "client_msg_id": "bc3a666f-fafd-4e70-8912-a91d4a4b1579",
        "type": "message",
        "text": "Or put it this way, if you'd rank all programming languages on how they'd fare in my \"100 programmers\" thought experiment, I'd rank APL as \"most likely similar\", and C++ as \"most likely diverse\"",
        "user": "UHDQ62M4P",
        "ts": "1557003195.020200",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556901860.014800",
        "parent_user_id": "UHDQ62M4P"
    },
    {
        "client_msg_id": "ac9eb6e6-265f-4356-8ae1-f219be57c90d",
        "type": "message",
        "text": "Totally. In addition to being difficult, I question if it’s desirable. Programmers love making analogies like “why can’t building software be as reliable as building bridges\/houses\/whatever.” Well, we’ve been building houses for a couple of millennia now. And the way we got good at it was by building lots of different houses, utterly decoupled from each other so that a flaw in one didn’t break every single house in the village\/country\/world. Fragmentation is desirable! It’s anti-fragile, and there’s a tendency to deemphasize anti-fragility when things are going well, and to over-optimize for efficiency.",
        "user": "UCUSW7WVD",
        "ts": "1557003640.020500",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556901860.014800",
        "parent_user_id": "UHDQ62M4P"
    },
    {
        "client_msg_id": "8ee66e73-f3c6-4215-a8d3-9fb352574595",
        "type": "message",
        "text": "haha yes, reuse also got us left-pad :slightly_smiling_face:",
        "user": "UHDQ62M4P",
        "ts": "1557004252.020700",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556901860.014800",
        "parent_user_id": "UHDQ62M4P",
        "reactions": [
            {
                "name": "slightly_smiling_face",
                "users": [
                    "UCUSW7WVD",
                    "UBSMEUXAA"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "cfba13ef-fdad-4312-b5bd-a5f8d3eaa1a8",
        "type": "message",
        "text": "I think you hit the nail on the head here:\n&gt; Currently if you ask 100 random programmers to implement even a medium-complexity bit of software you'll end up with 100 wildly different code bases that have entirely incompatible structures. This \"phenomenon\" lies at the root of the problem why code reuse will never be plug and play.\n\nAlso agree in general with\n&gt; Fragmentation is desirable! It’s anti-fragile\n\nNow some counter points:\n\n&gt; your first step is to prioritize \"there's only one way to do it\" above all else in language design\nYes, but I think this should rather be \"there's only one way to do it\" in *system composition*. If we look at how we get any reuse whatsover there seem to be two clear areas: One area is in-language composition with functions\/types or whatever shareable artifacts it provides. Another area is cross process\/library: C ABI, pipes, JSON+REST etc where you compose larger compiled bundles. The former is too transparent and the latter too opaque. These are the established composition methods but it there room to explore here? Maybe bundles of logic that provide encapsulation, yet allow late-binding with other bundles in ways that provide rich composition as well as performance?\n\nRegarding fragmentation, the question is do we need fragmentation in composition methods? Consider the world before TCP\/IP with large fragmentation of communication protocols. Or a world where bytes aren't all 8-bits. Or a web with various parallel alternatives for HTTP. In any case, while the whole world doesn't have to conform to the 'one way', it would be nice to have composition that is richer\/deeper than 'API', i.e. more like in-language composition, yet allow a diversity of implementation methods. I don't have much clarity here, but it does seem the the two ways of doing composition are arbitrary.",
        "user": "U8A5MS6R1",
        "ts": "1557009526.021400",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh Chaturvedi",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1557010053.000000"
        },
        "thread_ts": "1556901860.014800",
        "parent_user_id": "UHDQ62M4P"
    },
    {
        "client_msg_id": "c20c6c49-2284-46dc-8940-1a5294383c08",
        "type": "message",
        "text": "First, I personally do not advocate \"there's only one way to do it\" style language design.",
        "user": "UHDQ62M4P",
        "ts": "1557016495.021700",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556901860.014800",
        "parent_user_id": "UHDQ62M4P"
    },
    {
        "client_msg_id": "20065866-1d54-4445-80dc-cbc72ea088db",
        "type": "message",
        "text": "certainly reuse where the edges are file formats seems to have been more effective than APIs :slightly_smiling_face:",
        "user": "UHDQ62M4P",
        "ts": "1557016613.021900",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556901860.014800",
        "parent_user_id": "UHDQ62M4P"
    },
    {
        "client_msg_id": "6a39784b-a825-4426-bb78-317afe3a43ab",
        "type": "message",
        "text": "I think the richer you make the glue system, the less reuse you get",
        "user": "UHDQ62M4P",
        "ts": "1557016700.022100",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556901860.014800",
        "parent_user_id": "UHDQ62M4P"
    }
]