[
    {
        "client_msg_id": "f831ef10-4a12-4359-bb2e-8517c03c209e",
        "type": "message",
        "text": "<@UEQ6M68H0> Yes, I agree that being able to represent large functions well is important. Although I do also think that there's value in being able to represent smaller bits of code compactly. One strategy for representing large functions is to decompose them into smaller functions. Compact representations of small functions makes this strategy more viable since all of the small functions can be fit close together on the screen.\n\n<@U79HM6726> It's not more compact than the textual Haskell version. As an aside, it's interesting to ponder how to make a visual representation that is more compact than the textual version. Three ideas that come to mind are:\n1. No variable names. In this example for instance all of the \"x\"s could be removed.\n2. An understandable visual representation of point-free style code. I have not thought much about this since Glance needs to generate understandable textual code.\n3. Use a 3rd dimension. For example space (AR\/VR) or time (animations or user interaction).",
        "user": "UP3FH4CLU",
        "ts": "1575847842.260600",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g82383c24412",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/82383c2441228c52f5d8ec17161dc031.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "",
            "real_name": "Robbie Gleichman",
            "display_name": "Robbie Gleichman",
            "team": "T5TCAFTA9",
            "name": "rgleichman",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7fmv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " Yes, I agree that being able to represent large functions well is important. Although I do also think that there's value in being able to represent smaller bits of code compactly. One strategy for representing large functions is to decompose them into smaller functions. Compact representations of small functions makes this strategy more viable since all of the small functions can be fit close together on the screen.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "U79HM6726"
                            },
                            {
                                "type": "text",
                                "text": " It's not more compact than the textual Haskell version. As an aside, it's interesting to ponder how to make a visual representation that is more compact than the textual version. Three ideas that come to mind are:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "No variable names. In this example for instance all of the \"x\"s could be removed."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "An understandable visual representation of point-free style code. I have not thought much about this since Glance needs to generate understandable textual code."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Use a 3rd dimension. For example space (AR\/VR) or time (animations or user interaction)."
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0
                    }
                ]
            }
        ],
        "thread_ts": "1574676060.237400",
        "parent_user_id": "UP3FH4CLU"
    }
]