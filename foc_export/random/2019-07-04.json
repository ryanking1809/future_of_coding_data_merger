[
    {
        "type": "message",
        "text": "This is kind of a sanity check \/ knowledge representation question thats been bothering me for quite some time now. Whenever I end up modelling systems on a big scale, I end up drawing things like. So this is like layers of the system with each layer containing subsystems that can be layered or are graphs in themselves. Now these entities are in flux in that they change their topology as time progresses. This is the biggest model I can conjure up to visually articulate my conceptual understanding of most systems.\n\nMy question is, are these the natural concepts to represent complex systems or are there simpler fundamental units that can be composed to build bigger systems that generate the desired system dynamics? Have you guys come across anything in the literature? I have this inkling that graphs . could probably be expressed with some sort of simple units of composition.",
        "files": [
            {
                "id": "FL6RXHUG7",
                "created": 1562242862,
                "timestamp": 1562242862,
                "name": "image.png",
                "title": "image.png",
                "mimetype": "image\/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UDKTZSD6H",
                "editable": false,
                "size": 190378,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https:\/\/files.slack.com\/files-pri\/T5TCAFTA9-FL6RXHUG7\/image.png?t=xoxe-197418537349-1220335257046-1227067770482-88f226025a2db8e34ac513e918d80320",
                "url_private_download": "https:\/\/files.slack.com\/files-pri\/T5TCAFTA9-FL6RXHUG7\/download\/image.png?t=xoxe-197418537349-1220335257046-1227067770482-88f226025a2db8e34ac513e918d80320",
                "thumb_64": "https:\/\/files.slack.com\/files-tmb\/T5TCAFTA9-FL6RXHUG7-ae7e897cd1\/image_64.png?t=xoxe-197418537349-1220335257046-1227067770482-88f226025a2db8e34ac513e918d80320",
                "thumb_80": "https:\/\/files.slack.com\/files-tmb\/T5TCAFTA9-FL6RXHUG7-ae7e897cd1\/image_80.png?t=xoxe-197418537349-1220335257046-1227067770482-88f226025a2db8e34ac513e918d80320",
                "thumb_360": "https:\/\/files.slack.com\/files-tmb\/T5TCAFTA9-FL6RXHUG7-ae7e897cd1\/image_360.png?t=xoxe-197418537349-1220335257046-1227067770482-88f226025a2db8e34ac513e918d80320",
                "thumb_360_w": 360,
                "thumb_360_h": 278,
                "thumb_480": "https:\/\/files.slack.com\/files-tmb\/T5TCAFTA9-FL6RXHUG7-ae7e897cd1\/image_480.png?t=xoxe-197418537349-1220335257046-1227067770482-88f226025a2db8e34ac513e918d80320",
                "thumb_480_w": 480,
                "thumb_480_h": 371,
                "thumb_160": "https:\/\/files.slack.com\/files-tmb\/T5TCAFTA9-FL6RXHUG7-ae7e897cd1\/image_160.png?t=xoxe-197418537349-1220335257046-1227067770482-88f226025a2db8e34ac513e918d80320",
                "thumb_720": "https:\/\/files.slack.com\/files-tmb\/T5TCAFTA9-FL6RXHUG7-ae7e897cd1\/image_720.png?t=xoxe-197418537349-1220335257046-1227067770482-88f226025a2db8e34ac513e918d80320",
                "thumb_720_w": 720,
                "thumb_720_h": 557,
                "thumb_800": "https:\/\/files.slack.com\/files-tmb\/T5TCAFTA9-FL6RXHUG7-ae7e897cd1\/image_800.png?t=xoxe-197418537349-1220335257046-1227067770482-88f226025a2db8e34ac513e918d80320",
                "thumb_800_w": 800,
                "thumb_800_h": 619,
                "thumb_960": "https:\/\/files.slack.com\/files-tmb\/T5TCAFTA9-FL6RXHUG7-ae7e897cd1\/image_960.png?t=xoxe-197418537349-1220335257046-1227067770482-88f226025a2db8e34ac513e918d80320",
                "thumb_960_w": 960,
                "thumb_960_h": 742,
                "thumb_1024": "https:\/\/files.slack.com\/files-tmb\/T5TCAFTA9-FL6RXHUG7-ae7e897cd1\/image_1024.png?t=xoxe-197418537349-1220335257046-1227067770482-88f226025a2db8e34ac513e918d80320",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 792,
                "image_exif_rotation": 1,
                "original_w": 1464,
                "original_h": 1132,
                "permalink": "https:\/\/futureofcoding.slack.com\/files\/UDKTZSD6H\/FL6RXHUG7\/image.png",
                "permalink_public": "https:\/\/slack-files.com\/T5TCAFTA9-FL6RXHUG7-e57129cbc6",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": true,
        "user": "UDKTZSD6H",
        "display_as_bot": false,
        "ts": "1562242865.186300",
        "client_msg_id": "a8a89bf9-5783-4bad-a1fd-b0f830a22796",
        "thread_ts": "1562242865.186300",
        "reply_count": 9,
        "reply_users_count": 5,
        "latest_reply": "1563801949.003200",
        "reply_users": [
            "U5STGTB3J",
            "UJPHQ8Z3N",
            "UC2A2ARPT",
            "UDKTZSD6H",
            "UCUSW7WVD"
        ],
        "replies": [
            {
                "user": "U5STGTB3J",
                "ts": "1562243704.190600"
            },
            {
                "user": "UJPHQ8Z3N",
                "ts": "1562254449.191100"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1562257927.191500"
            },
            {
                "user": "UDKTZSD6H",
                "ts": "1562349106.194300"
            },
            {
                "user": "UDKTZSD6H",
                "ts": "1562349235.194700"
            },
            {
                "user": "UDKTZSD6H",
                "ts": "1562349815.194900"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1562359362.195500"
            },
            {
                "user": "UDKTZSD6H",
                "ts": "1562684588.206800"
            },
            {
                "user": "UDKTZSD6H",
                "ts": "1563801949.003200"
            }
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0",
                    "UD4Q9LT52",
                    "UCKRZS3DZ",
                    "UAVCC2X70"
                ],
                "count": 4
            }
        ]
    },
    {
        "client_msg_id": "6E020844-B2B3-4D5D-B14D-89933C8AF21D",
        "type": "message",
        "text": "This reminds me of three random things you might or might not find helpful:\n\n1. The Architecture of Complexity (<http:\/\/www2.econ.iastate.edu\/tesfatsi\/ArchitectureOfComplexity.HSimon1962.pdf>)\n2. The pattern of composition over monoidal structures could be an alternative model I just mentioned here: <https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1562155840164900?thread_ts=1562107818.137200&amp;channel=C5U3SEW6A&amp;message_ts=1562155840.164900>\n3. This touches on category theory somewhat, but then everything kind of does. Not sure if you want to explore that rabbit hole… if so, come join us in <#CKC6FM9DF|category-theory>.",
        "user": "U5STGTB3J",
        "ts": "1562243704.190600",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "from_url": "https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1562155840164900?thread_ts=1562107818.137200&amp;channel=C5U3SEW6A&amp;message_ts=1562155840.164900",
                "fallback": "[July 3rd, 2019 5:10 AM] stefanlesser: <@UJN1TAYEQ> This sounds a lot like composition over a monoidal structure is what you’re looking for. Like when you’re adding two integers you get another integer, which could be just calculated directly, or be stored lazily as a composition of the two original integers wrapped in a structure of the same type (this can be done as a function\/closure or type or class\/object, whatever your preferred implementation flavor is). \n\nOf course, integers are a simplistic example, but many more complex DSLs evaluate to a structure like this. I’ve been recently looking at how SwiftUI works, and it does this with composing transformation operations on views, which are views themselves. I assume React probably works similarly.\n\nIn some object graph libraries for 3D (and 2D as well, for that matter) this is used to apply transformations, for instance to apply a combination of translation, rotation, and skewing operations on an object, which can either be preserved as separate operations (e.g. if you need to visualize each operation in the UI) or can be merged into a single matrix transformation (e.g. if you want faster performance when rendering the object graph).\n\nI believe many functional reactive programming libraries use that pattern to transform and combine streams.\n\nParser combinators are another example, but it’s a little more complicated because they usually use monadic structures to wrap additional state or error handling into the same type.\n\nI’m not sure if I’m using the correct terminology and maybe this is something that’s well known under a different name. It’s just a pattern I see pop up everywhere, especially recently, and which I find extremely interesting, because it allows you to design a system with very few essential building blocks and very high composability — a recipe for building ultra-complex structures from just a few simple components that are easy to learn.",
                "ts": "1562155840.164900",
                "author_id": "U5STGTB3J",
                "author_subname": "Stefan Lesser",
                "channel_id": "C5U3SEW6A",
                "channel_name": "random",
                "is_msg_unfurl": true,
                "is_reply_unfurl": true,
                "text": "<@UJN1TAYEQ> This sounds a lot like composition over a monoidal structure is what you’re looking for. Like when you’re adding two integers you get another integer, which could be just calculated directly, or be stored lazily as a composition of the two original integers wrapped in a structure of the same type (this can be done as a function\/closure or type or class\/object, whatever your preferred implementation flavor is). \n\nOf course, integers are a simplistic example, but many more complex DSLs evaluate to a structure like this. I’ve been recently looking at how SwiftUI works, and it does this with composing transformation operations on views, which are views themselves. I assume React probably works similarly.\n\nIn some object graph libraries for 3D (and 2D as well, for that matter) this is used to apply transformations, for instance to apply a combination of translation, rotation, and skewing operations on an object, which can either be preserved as separate operations (e.g. if you need to visualize each operation in the UI) or can be merged into a single matrix transformation (e.g. if you want faster performance when rendering the object graph).\n\nI believe many functional reactive programming libraries use that pattern to transform and combine streams.\n\nParser combinators are another example, but it’s a little more complicated because they usually use monadic structures to wrap additional state or error handling into the same type.\n\nI’m not sure if I’m using the correct terminology and maybe this is something that’s well known under a different name. It’s just a pattern I see pop up everywhere, especially recently, and which I find extremely interesting, because it allows you to design a system with very few essential building blocks and very high composability — a recipe for building ultra-complex structures from just a few simple components that are easy to learn.",
                "author_name": "Stefan Lesser",
                "author_link": "https:\/\/futureofcoding.slack.com\/team\/U5STGTB3J",
                "author_icon": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_48.jpg",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1562155840164900?thread_ts=1562107818.137200&amp;channel=C5U3SEW6A&amp;message_ts=1562155840.164900",
                "footer": "From a thread in #random"
            }
        ],
        "thread_ts": "1562242865.186300",
        "parent_user_id": "UDKTZSD6H",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UDKTZSD6H",
                    "UCUSW7WVD",
                    "UA14TGLTC"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "105b89d5-89cf-4f15-b092-672ee1e40028",
        "type": "message",
        "text": "Does the `i`, `i + 1` represent time\/evolution of your systems? Capturing both structural and evolution (or dynamics\/interactions) on the same diagram is certainly challenging, but what you have here makes sense, visually. I think Time Machine on OSX has a similar way of representing evolution\/versions. <https:\/\/www.simplehelp.net\/images\/timemachine\/tm11.jpg>",
        "user": "UJPHQ8Z3N",
        "ts": "1562254449.191100",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "geb6636f344e",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/deb6636f344e6071fd9fe70724825ac6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Sébastien",
            "real_name": "Sébastien",
            "display_name": "Sébastien",
            "team": "T5TCAFTA9",
            "name": "sebastien.pierre",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "edited": {
            "user": "UJPHQ8Z3N",
            "ts": "1562254463.000000"
        },
        "attachments": [
            {
                "fallback": "1440x900px image",
                "image_url": "https:\/\/www.simplehelp.net\/images\/timemachine\/tm11.jpg",
                "image_width": 1440,
                "image_height": 900,
                "image_bytes": 609758,
                "from_url": "https:\/\/www.simplehelp.net\/images\/timemachine\/tm11.jpg",
                "id": 1,
                "original_url": "https:\/\/www.simplehelp.net\/images\/timemachine\/tm11.jpg"
            }
        ],
        "thread_ts": "1562242865.186300",
        "parent_user_id": "UDKTZSD6H"
    },
    {
        "client_msg_id": "be07104a-5b18-4a9c-a346-1716f9731c5d",
        "type": "message",
        "text": "<@UDKTZSD6H> This is exactly how I envisioned the abstraction mechanism in Hest _looking_. The nesting would happen along the z-axis, into the screen, so it'd be as if your camera were at the top of that image pointing down.\n\nSo to answer your question... for me, yes, this is the most natural way to mentally visualize complex systems.\n\nOne aspect not shown in this image is that this you'd need the outer structure to be a graph, not a tree. For instance, a math utility library that helps you deal with real numbers might be referenced in many otherwise separate systems.\n\nThis can still be visualized as _layers, where when travelling from one layer down to the next, each point in the upper layer expands—like a cone—into a region of the lower layer_, you'd just have some of the points expand down to the same region in the layer below.\n\nThere are other similar tweaks you'd need to make to account for recursion, or the fact that the same shared code might be referenced from many different layers (eg: if the top layer references the math library, and a lower layer does too).\n\nBut in the most simple form, your image is fantastic.",
        "user": "UC2A2ARPT",
        "ts": "1562257927.191500",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1562259157.000000"
        },
        "thread_ts": "1562242865.186300",
        "parent_user_id": "UDKTZSD6H"
    },
    {
        "client_msg_id": "9400fc2f-8432-400a-810f-c128ed46df54",
        "type": "message",
        "text": "Just posted my question elsewhere: <https:\/\/www.reddit.com\/r\/ProgrammingLanguages\/comments\/c97flm\/languages_distinguishing_between_machine_types>",
        "user": "UCUSW7WVD",
        "ts": "1562272967.192800",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "service_name": "reddit",
                "title": "r\/ProgrammingLanguages - Languages distinguishing between 'machine' types and 'domain' types",
                "title_link": "https:\/\/www.reddit.com\/r\/ProgrammingLanguages\/comments\/c97flm\/languages_distinguishing_between_machine_types",
                "text": "0 votes and 0 comments so far on Reddit",
                "fallback": "reddit: r\/ProgrammingLanguages - Languages distinguishing between 'machine' types and 'domain' types",
                "thumb_url": "https:\/\/external-preview.redd.it\/eg-r9cgGGcAByzU4q7RKa1dsHYs8GizqOmyAhiLrL0g.jpg?auto=webp&s=cd61ff4382d86edac82aeafd1c38001c7e305a9b",
                "from_url": "https:\/\/www.reddit.com\/r\/ProgrammingLanguages\/comments\/c97flm\/languages_distinguishing_between_machine_types",
                "thumb_width": 2220,
                "thumb_height": 1248,
                "service_icon": "https:\/\/www.redditstatic.com\/desktop2x\/img\/favicon\/apple-icon-57x57.png",
                "id": 1,
                "original_url": "https:\/\/www.reddit.com\/r\/ProgrammingLanguages\/comments\/c97flm\/languages_distinguishing_between_machine_types"
            }
        ],
        "thread_ts": "1562010026.133300",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "a702fb67-5b82-48d4-9790-a2312d1250c4",
        "type": "message",
        "text": "Somebody there mentioned refinement types, which seem at first glance to be an interesting halfway point to dependent types.",
        "user": "UCUSW7WVD",
        "ts": "1562285680.193100",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1562010026.133300",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "d39c937f-b675-40cb-b7ff-521a6f20d2e6",
        "type": "message",
        "text": "I've also received a suggestion to check out Ada 2012: <https:\/\/www.adacore.com\/uploads\/books\/pdf\/SafeSecureAdav2015-covered.pdf> (page 21)",
        "user": "UCUSW7WVD",
        "ts": "1562306653.193700",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1562010026.133300",
        "parent_user_id": "U8A5MS6R1"
    }
]