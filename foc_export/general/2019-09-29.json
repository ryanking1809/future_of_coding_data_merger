[
    {
        "client_msg_id": "4dd958d4-f315-41d0-b43a-80667eb609ba",
        "type": "message",
        "text": "My question: Expert systems sound remarkably similar to Eve. Why did expert systems not take over the world of programming?\n\nI was reading Brook’s No Silver Bullets, and his description of an Expert System sounded remarkably like Eve. I understand that rule based systems failed to fulfill their promise in AI, because it’s hard to encapsulate some type of tasks like object recognition in rules--hence the rise of deep learning--so they fell out of favor. Was that the only reason, or are there others?",
        "user": "UNLS33M61",
        "ts": "1569782281.071300",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g915aac3dfde",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/915aac3dfde2fb502ce415d77643a72d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-72.png",
            "first_name": "",
            "real_name": "Wil Chung",
            "display_name": "Wil Chung",
            "team": "T5TCAFTA9",
            "name": "iamwil",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569782281.071300",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1570893762.240400",
        "reply_users": [
            "UEBG0NPDK",
            "UNLS33M61"
        ],
        "replies": [
            {
                "user": "UEBG0NPDK",
                "ts": "1569861047.114100"
            },
            {
                "user": "UNLS33M61",
                "ts": "1570893762.240400"
            }
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "58ea3d50-ba78-4237-be2f-270e71ae9732",
        "type": "message",
        "text": "before the AI winter on the end of the 80s there was a short hype on 5th Generation Languages (mostly around prolog) that didn't live up to the promise, and like AI after them they were ignored for a long time: <https:\/\/en.wikipedia.org\/wiki\/Fifth-generation_programming_language>",
        "user": "UBN9AFS0N",
        "ts": "1569783344.072600",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "title": "Fifth-generation programming language",
                "title_link": "https:\/\/en.wikipedia.org\/wiki\/Fifth-generation_programming_language",
                "from_url": "https:\/\/en.wikipedia.org\/wiki\/Fifth-generation_programming_language",
                "author_name": "Wikipedia",
                "author_link": "https:\/\/en.wikipedia.org\/",
                "text": "A fifth-generation programming language (5GL) is any programming language based on problem-solving using constraints given to the program, rather than using an algorithm written by a programmer. Most constraint-based and logic programming languages and some other declarative languages are fifth-generation languages.",
                "fallback": "wikipedia: Fifth-generation programming language",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/wikipedia.png",
                "id": 1,
                "original_url": "https:\/\/en.wikipedia.org\/wiki\/Fifth-generation_programming_language"
            }
        ],
        "thread_ts": "1569783344.072600",
        "reply_count": 5,
        "reply_users_count": 4,
        "latest_reply": "1569915341.128600",
        "reply_users": [
            "UL3CJ7YKC",
            "UA14TGLTC",
            "UCGAK10LS",
            "UEQ6M68H0"
        ],
        "replies": [
            {
                "user": "UL3CJ7YKC",
                "ts": "1569786326.073100"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1569808402.081400"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1569814930.083800"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1569822384.095200"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1569915341.128600"
            }
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "879ba472-3b8b-4fca-81ec-a90f34c21d01",
        "type": "message",
        "text": "<https:\/\/en.wikipedia.org\/wiki\/Fifth_generation_computer>",
        "user": "UBN9AFS0N",
        "ts": "1569783354.072900",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "title": "Fifth generation computer",
                "title_link": "https:\/\/en.wikipedia.org\/wiki\/Fifth_generation_computer",
                "from_url": "https:\/\/en.wikipedia.org\/wiki\/Fifth_generation_computer",
                "author_name": "Wikipedia",
                "author_link": "https:\/\/en.wikipedia.org\/",
                "text": "The Fifth Generation Computer Systems (FGCS) was an initiative by Japan's Ministry of International Trade and Industry (MITI), begun in 1982, to create computers using massively parallel computing and logic programming. It was to be the result of a massive government\/industry research project in Japan during the 1980s. It aimed to create an \"epoch-making computer\" with supercomputer-like performance and to provide a platform for future developments in artificial intelligence. There was also an unrelated Russian project also named as a fifth-generation computer (see Kronos (computer)).\n\nProf. Ehud Shapiro, in his \"Trip Report\" paper (which focused the FGCS project on concurrent logic programming as the software foundation for the project), captured the rationale and motivations driving this huge project: \"As part of Japan's effort to become a leader in the computer industry, the Institute for New Generation Computer Technology has launched a revolutionary ten-year plan for the development of large computer systems which will be applicable to knowledge information processing systems. These Fifth Generation computers will be built around the concepts of logic programming. In order to refute the accusation that Japan exploits knowledge from abroad without contributing any of its own, this project will stimulate original research and will make its results available to the international research community.\"\nThe term \"fifth generation\" was intended to convey the system as being a leap beyond existing machines. In the history of computing hardware, computers using vacuum tubes were called the first generation; transistors and diodes, the second; integrated circuits, the third; and those using microprocessors, the fourth. Whereas previous computer generations had focused on increasing the number of logic elements in a single CPU, the fifth generation, it was widely believed at the time, would instead turn to massive numbers of CPUs for added performance.\nThe project was to create the computer over a ten-year period, after which it was considered ended and investment in a new \"sixth generation\" project would begin. Opinions about its outcome are divided: either it was a failure, or it was ahead of its time.",
                "fallback": "wikipedia: Fifth generation computer",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/wikipedia.png",
                "id": 1,
                "original_url": "https:\/\/en.wikipedia.org\/wiki\/Fifth_generation_computer"
            }
        ]
    },
    {
        "client_msg_id": "5d87f6cb-ae1d-4934-be05-4b4ce0b0929c",
        "type": "message",
        "text": "When I got introduced in Prolog I found it really interesting and Prolog led me to write a post to HN which led me here. However, I think Prolog and “classic logic programming” are not as useful for general purpose programming as advanced types systems and Dependent Typed systems like Idris.",
        "user": "UL3CJ7YKC",
        "ts": "1569786326.073100",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5612322b81b6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-11-14\/834114331988_5612322b81b6d142511b_72.jpg",
            "first_name": "Pezo",
            "real_name": "Pezo - Zoltan Peto",
            "display_name": "Pezo - Zoltan Peto",
            "team": "T5TCAFTA9",
            "name": "pezo1919",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569783344.072600",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "4c21f6d9-d624-4c06-bda6-615c9a46a849",
        "type": "message",
        "text": "To me it sounds like old and smart guys talking about Smalltalk + its environment, lisp + emacs (or + Cursive) or a bit like C# and the Unity3d Editor. Oh and let me add React-live here :slightly_smiling_face: <https:\/\/github.com\/FormidableLabs\/react-live>",
        "user": "UL3CJ7YKC",
        "ts": "1569786540.073300",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5612322b81b6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-11-14\/834114331988_5612322b81b6d142511b_72.jpg",
            "first_name": "Pezo",
            "real_name": "Pezo - Zoltan Peto",
            "display_name": "Pezo - Zoltan Peto",
            "team": "T5TCAFTA9",
            "name": "pezo1919",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "edited": {
            "user": "UL3CJ7YKC",
            "ts": "1569786623.000000"
        },
        "thread_ts": "1569693322.069100",
        "parent_user_id": "UAVCC2X70"
    },
    {
        "client_msg_id": "8f729501-160c-488d-b339-ee076c486ab5",
        "type": "message",
        "text": "Ah, and also have a look at this!\n<https:\/\/www.jetbrains.com\/mps\/>",
        "user": "UL3CJ7YKC",
        "ts": "1569786772.073800",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5612322b81b6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-11-14\/834114331988_5612322b81b6d142511b_72.jpg",
            "first_name": "Pezo",
            "real_name": "Pezo - Zoltan Peto",
            "display_name": "Pezo - Zoltan Peto",
            "team": "T5TCAFTA9",
            "name": "pezo1919",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "service_name": "JetBrains",
                "title": "MPS: Domain-Specific Language Creator and Projection Editor by JetBrains",
                "title_link": "https:\/\/www.jetbrains.com\/mps\/",
                "text": "Use MPS platform to create your own domain-specific language that speak to your business needs. Use non-textual notation with projectional editing.",
                "fallback": "JetBrains: MPS: Domain-Specific Language Creator and Projection Editor by JetBrains",
                "image_url": "http:\/\/resources.jetbrains.com\/storage\/products\/mps\/img\/meta\/mps_1280x800.png",
                "fields": [
                    {
                        "title": "Platforms:",
                        "value": "Windows, macOS, Linux",
                        "short": true
                    }
                ],
                "from_url": "https:\/\/www.jetbrains.com\/mps\/",
                "image_width": 400,
                "image_height": 250,
                "image_bytes": 1632542,
                "service_icon": "https:\/\/www.jetbrains.com\/apple-touch-icon.png",
                "id": 1,
                "original_url": "https:\/\/www.jetbrains.com\/mps\/"
            }
        ],
        "thread_ts": "1569693322.069100",
        "parent_user_id": "UAVCC2X70"
    },
    {
        "client_msg_id": "e5f6893e-a596-4141-bb7a-d81672f3130f",
        "type": "message",
        "text": "I want to eliminate the problem of Object-Relational Mapping by not using Relational database for the backend.\nRelational and in-memory representation are 2 different kind of beasts, I want something less rigid and more flexible then a Relational database: a Graph database. I am constantly looking for the best solution available on the market and to me it seems still Neo4j is the best witch its really cool language Cypher - even with the fact there is OpenCypher available pushed by their team.\n\nFor first I’d use it just a personal project as a React Native (Typescript) app backend, but later I’d like to use it for my projects.\n\nDo you have XP any Graph database? Can you please share it with me? What do you think?",
        "user": "UL3CJ7YKC",
        "ts": "1569787170.079600",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5612322b81b6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-11-14\/834114331988_5612322b81b6d142511b_72.jpg",
            "first_name": "Pezo",
            "real_name": "Pezo - Zoltan Peto",
            "display_name": "Pezo - Zoltan Peto",
            "team": "T5TCAFTA9",
            "name": "pezo1919",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "edited": {
            "user": "UL3CJ7YKC",
            "ts": "1569787206.000000"
        },
        "thread_ts": "1569787170.079600",
        "reply_count": 11,
        "reply_users_count": 5,
        "latest_reply": "1570116602.154300",
        "reply_users": [
            "UCGAK10LS",
            "U8A5MS6R1",
            "UL3CJ7YKC",
            "UMVFWPZ36",
            "ULTSNR8LF"
        ],
        "replies": [
            {
                "user": "UCGAK10LS",
                "ts": "1569816213.084000"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1569816786.090900"
            },
            {
                "user": "UL3CJ7YKC",
                "ts": "1569832704.095700"
            },
            {
                "user": "UL3CJ7YKC",
                "ts": "1569834124.096000"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1569842180.105900"
            },
            {
                "user": "UMVFWPZ36",
                "ts": "1569874683.119800"
            },
            {
                "user": "ULTSNR8LF",
                "ts": "1570075206.150500"
            },
            {
                "user": "ULTSNR8LF",
                "ts": "1570075225.151200"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1570079757.153600"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1570079798.153900"
            },
            {
                "user": "UL3CJ7YKC",
                "ts": "1570116602.154300"
            }
        ],
        "subscribed": false
    },
    {
        "type": "message",
        "subtype": "thread_broadcast",
        "text": "I just found the best 1-sentence summary of \"worse is better\" ever. And it's by the author:\n\n_\"It is far better to have an under-featured product that is rock solid, fast, and small than one that covers what an expert would consider the complete requirements.\"_\n\n(<https:\/\/www.dreamsongs.com\/Files\/PatternsOfSoftware.pdf>, pg 219)\n\nTalk about burying the lede.",
        "user": "UCUSW7WVD",
        "ts": "1569796242.080200",
        "thread_ts": "1557860308.364300",
        "root": {
            "client_msg_id": "1f7aa03a-6651-4d41-b615-face530ed734",
            "type": "message",
            "text": "Just a random thought: I was looking at Bret Victor’s old Learnable Programming, and it had a little note about how programming consists of decomposing problems, and I realized: that’s not what I do these days. I spend all my time thinking about messaging and communication between systems, and “decomposition” feels like a luxury. I don’t know if that’s a general change in programming, or just the nature of my work or professional stage… but it feels like a real change to me.\n\nThat is, I spend a lot of time thinking about these things:\n1. What are the entities in my system? These could be as simple as objects, but might be remote services, or different processes, browser tabs, etc.\n2. Who knows what?\n3. Who needs to keep track of what?\n4. From any given context, how do I get access to the other entities?\n5. How do I communicate with them? The push\/pull of functions or RPC? Pub\/sub? Some wonky event system?\n6. Where does a particular change originate, and which entities are simply reactive?\n\nThis all is where a lot of modern language development leaves me cold. Types don’t offer much here. Going further, I think there really is a kind of modernist\/postmodernist break here (ala <http:\/\/homepages.mcs.vuw.ac.nz\/~kjx\/papers\/nopp.pdf>): modern approaches attempt to create self-consistent and robust systems, and postmodernist approaches accept that we operate in a diverse systems where a lot of important things happen at the intersection of incompatible modernist systems.\n\nI don’t have any conclusion in mind, but I’d be interested in people’s thoughts.",
            "user": "UJM9NG84Q",
            "ts": "1557860308.364300",
            "team": "T5TCAFTA9",
            "thread_ts": "1557860308.364300",
            "reply_count": 35,
            "reply_users_count": 10,
            "latest_reply": "1570003743.141300",
            "reply_users": [
                "UCUSW7WVD",
                "UJBAJNFLK",
                "UJM9NG84Q",
                "UEQ6M68H0",
                "UJKC8B0QN",
                "U8A5MS6R1",
                "UA14TGLTC",
                "UJN1TAYEQ",
                "UHDQ62M4P",
                "UM1HH60GN"
            ],
            "subscribed": false
        },
        "client_msg_id": "38ba7967-9add-4731-aa90-3d586d8886a4",
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "UHWC9PXBL",
                    "UA14TGLTC",
                    "UBM0S2AN4"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "0bbf57d3-e876-4f73-b848-9dadc06d062a",
        "type": "message",
        "text": "Oh, MPS and Smalltalk are definitely in the same (or similar) vein for my overall goals!\n\nThe demo I'm looking to make is just to make a tangible point or analogy about artificial boundaries, but definitely doesn't offer a solution for fluidly dissolving that boundary at will (unless you count manually rewriting code and manually implementing extra UIs and parsers, etc., for a one-time use scenario, which is not exactly practical).\n\nThose tools probably offer the highest degree of fluidity currently available (shout out to Glamorous Toolkit, too!), but what they don't do is make the live code (or equivalent) for the tool itself present and editable in itself. It's hard to explain in few words what that gains, but I think it's key to making truly moldable software in every sense.",
        "user": "UAVCC2X70",
        "ts": "1569801533.080800",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1569857423.000000"
        },
        "thread_ts": "1569693322.069100",
        "parent_user_id": "UAVCC2X70",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UL3CJ7YKC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "7bc9f99f-0ed5-43eb-baaf-7971f155dff1",
        "type": "message",
        "text": "Having seen  a bunch of people (linguistics students) introduced to Prolog, it's just way to easy to get into infinite lookup loops.",
        "user": "UA14TGLTC",
        "ts": "1569808402.081400",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569783344.072600",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "e4c79673-76bb-4e2f-b9e0-cde191e56bd8",
        "type": "message",
        "text": "There's also the fact that the last 10% of complete usually includes the fiddly bits that break the other 90%.",
        "user": "UA14TGLTC",
        "ts": "1569808607.083500",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "edited": {
            "user": "UA14TGLTC",
            "ts": "1569808676.000000"
        }
    },
    {
        "client_msg_id": "6e391e81-deaa-4e12-8bc2-205216b45aed",
        "type": "message",
        "text": "I think there's a lot we can learn from Prolog. If you skip over the problems of recursive rules, it offers a pretty damn decent data storage &amp; query model. It's non-hierarchical like an SQL database, yet doesn't force you to contort your data into normalized tables.",
        "user": "UCGAK10LS",
        "ts": "1569814930.083800",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "770c193fd379",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-04-17\/1092364753072_770c193fd379ebbced3f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569783344.072600",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "type": "message",
        "subtype": "thread_broadcast",
        "text": "I've been thinking about graph databases recently. Some points:\n- Cypher is an interesting *query language* (as an alternative to SQL) because it does not force the concept of tables into a user's mental model. Tables are ultimately an arbitrary construct that were originally introduced as a mathematical construct for helping formalize \"the relational model\". They were not conceived with UX in mind and it shouldn't be too controversial to conclude that they add a lot of day-to-day complexity to SQL (normalization, key constraints, indices...).\n- Neo4j's data storage tech is *not* interesting, since its big idea is simply to store all data as pointer spaghetti. Other than that, it uses indices just like SQL DBs. Also on this point: if you're just trying to find a good programming model for users, then the underlying implementation details of your system are interchangeable and thus irrelevant.",
        "user": "UCGAK10LS",
        "ts": "1569816213.084000",
        "thread_ts": "1569787170.079600",
        "root": {
            "client_msg_id": "e5f6893e-a596-4141-bb7a-d81672f3130f",
            "type": "message",
            "text": "I want to eliminate the problem of Object-Relational Mapping by not using Relational database for the backend.\nRelational and in-memory representation are 2 different kind of beasts, I want something less rigid and more flexible then a Relational database: a Graph database. I am constantly looking for the best solution available on the market and to me it seems still Neo4j is the best witch its really cool language Cypher - even with the fact there is OpenCypher available pushed by their team.\n\nFor first I’d use it just a personal project as a React Native (Typescript) app backend, but later I’d like to use it for my projects.\n\nDo you have XP any Graph database? Can you please share it with me? What do you think?",
            "user": "UL3CJ7YKC",
            "ts": "1569787170.079600",
            "team": "T5TCAFTA9",
            "edited": {
                "user": "UL3CJ7YKC",
                "ts": "1569787206.000000"
            },
            "thread_ts": "1569787170.079600",
            "reply_count": 11,
            "reply_users_count": 5,
            "latest_reply": "1570116602.154300",
            "reply_users": [
                "UCGAK10LS",
                "U8A5MS6R1",
                "UL3CJ7YKC",
                "UMVFWPZ36",
                "ULTSNR8LF"
            ],
            "subscribed": false
        },
        "client_msg_id": "73a1040a-5aff-4be3-88a9-a6753bd8f5d7"
    },
    {
        "client_msg_id": "dd2d4282-21ed-4449-9c37-7c45c4457e51",
        "type": "message",
        "text": "So I agree that Object-Relational Mapping is silly and annoying, but that's really due to a mismatch between query languages and programming languages, and the actual DB engines that store physical data and execute those queries aren't really important from a UX standpoint. So the real question is: how can you bring query languages, \"persistent data\" and \"ephemeral data\" closer together? Can you have a uniform way to address all three? This is what Eve was doing (IMO). So Cypher is interesting, but wouldn't worry about DB *engines*. <@UEBG0NPDK> can speak more to that I guess.",
        "user": "UCGAK10LS",
        "ts": "1569816522.088400",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "770c193fd379",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-04-17\/1092364753072_770c193fd379ebbced3f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1569817223.000000"
        },
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC21F8Q48",
                    "UL3CJ7YKC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "b7ccf940-8489-40e7-b0ad-dd35ed6c6fc1",
        "type": "message",
        "text": "This is half where my own headspace has been situated recently. The other half has been on the thorny question of concurrency. Anyone who thinks these topics are important, ping me :slightly_smiling_face: (I have a lot of thoughts and hypotheses)",
        "user": "UCGAK10LS",
        "ts": "1569816730.090700",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "770c193fd379",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-04-17\/1092364753072_770c193fd379ebbced3f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1569816751.000000"
        },
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UL3CJ7YKC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "0dd510a4-53a7-46ec-a9fa-f2a163782975",
        "type": "message",
        "text": "I've only briefly looked at arangodb and it looked interesting. I've worked more with object databases in the past which have deep integration with the language\/runtime (e.g. Durus for Python). I  feel that such a model is in many ways superior to any kind of external db with 'mapping' to the in memory objects. There are no in-memory objects vs out of memory data stores - you just have the objects in-memory which are also persisted and available beyond the lifetime of the process.",
        "user": "U8A5MS6R1",
        "ts": "1569816786.090900",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh Chaturvedi",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569787170.079600",
        "parent_user_id": "UL3CJ7YKC"
    },
    {
        "client_msg_id": "7b353351-596e-422d-bad1-aa416dd60e73",
        "type": "message",
        "text": "One reason I've not seen mentioned why \"worse is better\" is better is compositionality: choosing a simple implementation with a possibly suboptimal API composes efficiently, whereas doing \"the right thing\" across multiple levels produces extreme inefficiency and impedance mismatch. Imagine a CPU-emulator written in Python running a Ruby interpreter :stuck_out_tongue:",
        "user": "UHDQ62M4P",
        "ts": "1569821270.091300",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1557860308.364300",
        "parent_user_id": "UJM9NG84Q"
    },
    {
        "client_msg_id": "fe5f5210-a22b-4a54-b328-38371e965c22",
        "type": "message",
        "text": "OR does seem silly.  We ended up landing on the O side to great competitive advantage, which is kind of lame given how little it gives you: easily defined virtual columns?  I would love to live on the R side if we had a decent, performant, integrated query language!  Certainly there's good research and good work out there, but with all the constraints, I'm sad something better hasn't emerged!  Would have come work for you <@UEBG0NPDK> had I thought I would have been an asset.",
        "user": "UA14TGLTC",
        "ts": "1569822117.095100",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569822117.095100",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1569912515.128100",
        "reply_users": [
            "UEBG0NPDK",
            "UA14TGLTC"
        ],
        "replies": [
            {
                "user": "UEBG0NPDK",
                "ts": "1569857750.109400"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1569912515.128100"
            }
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC21F8Q48"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "9309a1be-506d-4365-a9fd-90c3ea729755",
        "type": "message",
        "text": "Oh certainly!  Prolog's worst feature is its strict semantics.  And some implementations surely eschew this.  More broadly, tooling and feedback really matter.  Learning a language is tough.  It's weird to see professionals sit down at say, MATLAB imagining that they'll be able to do something without reading a manual!",
        "user": "UA14TGLTC",
        "ts": "1569822384.095200",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569783344.072600",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "790c9ae8-36e2-4a5c-a86f-2b1a9d37c724",
        "type": "message",
        "text": "Ruby APIs: always a semantic mess yet usually easy to get good stuff done: quicker, easier, more seductive.",
        "user": "UA14TGLTC",
        "ts": "1569822496.095400",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1557860308.364300",
        "parent_user_id": "UJM9NG84Q"
    }
]