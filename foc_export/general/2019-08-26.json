[
    {
        "client_msg_id": "49e6251d-cc17-4e4e-a02a-0286afbead46",
        "type": "message",
        "text": "We believe Storyscript could be a good fit for this idea because it’s simply a language for gluing microservices. Those microservices can evolve independently, AB test and micro-scale. Fully polyglot development, cloud-native at <http:\/\/docs.storyscript.io|docs.storyscript.io>",
        "user": "UJKKBAMLL",
        "ts": "1566809556.462500",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6b9db1f76eed",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-06-12\/662675221668_6b9db1f76eed746965ca_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Peak",
            "display_name": "Steve",
            "team": "T5TCAFTA9",
            "name": "steve727",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "edited": {
            "user": "UJKKBAMLL",
            "ts": "1566809572.000000"
        },
        "thread_ts": "1566555331.405700",
        "parent_user_id": "UJBAJNFLK"
    },
    {
        "client_msg_id": "7e99128c-7b79-4aad-b8d4-dd5e526d731e",
        "type": "message",
        "text": "TBH I’m not sure a new language that replaces all other languages will truly transform the industry. IMO a new level of programming (call it top-level or cloud-native) should just be glue for polyglot microservices+functions+openapi+graphql+etc. — I’m still in shock that we (as a community) think a new one-size-fits-all language with an attitude of throw everything else out will resonate. It’s Smalltalk all over.",
        "user": "UJKKBAMLL",
        "ts": "1566809794.462800",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6b9db1f76eed",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-06-12\/662675221668_6b9db1f76eed746965ca_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Peak",
            "display_name": "Steve",
            "team": "T5TCAFTA9",
            "name": "steve727",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566555331.405700",
        "parent_user_id": "UJBAJNFLK"
    },
    {
        "client_msg_id": "6b160c32-3e91-4f62-8ca1-b5418e5d62c0",
        "type": "message",
        "text": "There is a seriously neglected research area that addresses the approach wherein you leave it to a compiler to select the byte layout for you (rather than making the choice yourself). The research area is \"data structure synthesis\" or \"data representation synthesis\". You can google these terms to find the relevant literature. I'd love to hear from anyone that knows something about how data structure synthesis has been (or could be) applied in a general purpose language.",
        "user": "UCGAK10LS",
        "ts": "1566821720.463500",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "770c193fd379",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-04-17\/1092364753072_770c193fd379ebbced3f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1566821740.000000"
        },
        "thread_ts": "1566688846.441800",
        "parent_user_id": "U8A5MS6R1",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U79HM6726",
                    "UNC5FQMD3"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "d308d0db-07ad-4bd2-9317-584be1c322b1",
        "type": "message",
        "text": "<@UC2A2ARPT> You linked exactly that talk!",
        "user": "UJBAJNFLK",
        "ts": "1566832948.464200",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g05e4cf66ef1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/305e4cf66ef1179f7e95981b1520ba1a.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566555331.405700",
        "parent_user_id": "UJBAJNFLK",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "3de8979f-89b9-44f3-9ad6-7cca64f4de36",
        "type": "message",
        "text": "<@UC2A2ARPT> yes the Jai's AOS\/SOA is a great example is great and kind of the thing I'm looking for - I didn't know you could do that.\n\n<@UHDQ62M4P> the main idea is that there's a 'business shape' as Ivan called it, and a separate mapping onto memory bits (and other implementation details). In languages where you don't define the latter, a default mapping is provided for you. Unfortunately this may not always be optimal. To take a simple example, objects are always stored as references in Python so a string attribute is a pointer to a string object. Strings are immutable so I should be able to *easily* say, for this class, store this attribute inline (i.e. embedded). So whenever you assign 'obj.strvalue = something', it would get copied (no refcount update). In Python you can write a custom C extension that does this, but it's too much work and not available within Python itself. C++ has copy constructors but they only work very isolated cases because the machine types (`char *` etc) are exposed and pervasive across APIs.\n\nThe motivation behind this is that I should be able to design with and write 'pure business logic' (for lack of a better word) without consideration of memory layouts and other lower level details, but also be able to specify these details separately. So if I change the memory layout, my business logic code doesn't have to change one bit. The business logic should only be coupled to the business shape. Consider how often in C++ a bunch of code will need to change if I switch from using a pointer to a reference. I also would like to do more advanced things, taking the Python example again, I may want to say that one attribute is always stored in a specific arena in memory. So whenever you assign to this attribute the value gets copied to the arena and aggregate operations on this attr become very fast. This would have to be baked into the language from the start - so `map` etc can be designed to be aware and use the internal structure of things. The ultimate extension of this idea is that you can take the same 'business logic' code and run it in a distributed fashion, but just providing a different implementation mapping.",
        "user": "U8A5MS6R1",
        "ts": "1566838055.464600",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh Chaturvedi",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566688846.441800",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "5b5da4de-d30f-4ac0-beca-3f80e1c6af8a",
        "type": "message",
        "text": "<@UCGAK10LS> - thanks for the pointers - will check them out.",
        "user": "U8A5MS6R1",
        "ts": "1566838339.464800",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh Chaturvedi",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566688846.441800",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "312728CF-37FD-4A64-93D1-F2E5A9CBBD4A",
        "type": "message",
        "text": "I love this thread so far. Thanks everyone for the very useful thinking and discourse.",
        "user": "UC2A2ARPT",
        "ts": "1566862081.466200",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566673857.433900",
        "parent_user_id": "UJN1TAYEQ"
    },
    {
        "client_msg_id": "BBE80B97-066B-47C8-B414-42781C4B1C65",
        "type": "message",
        "text": "Cycling 74 might count as a small purely tools company.",
        "user": "UC2A2ARPT",
        "ts": "1566862106.467000",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566673857.433900",
        "parent_user_id": "UJN1TAYEQ"
    },
    {
        "client_msg_id": "2A1C82AD-123D-42D2-AD39-F7247A595D6C",
        "type": "message",
        "text": "Perhaps Unity, too",
        "user": "UC2A2ARPT",
        "ts": "1566862135.467800",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566673857.433900",
        "parent_user_id": "UJN1TAYEQ"
    },
    {
        "client_msg_id": "44C96AA9-A229-4DF8-8421-BE6585F0E3BE",
        "type": "message",
        "text": "Interesting that the thread immediately above this one makes the opposite point! Again, this is inching toward confirming my hunch.",
        "user": "UC2A2ARPT",
        "ts": "1566862232.469000",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566687402.439400",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "7782e5a2-4cf5-4550-87ab-46483740fc21",
        "type": "message",
        "text": "The problem with decoupling that more than say C++\/Rust manage to do is that the representation matters a whole lot for how it is used.. if for example I pass on an array element to other code, its representation may determine its lifetime (who owns it), wether it is copied, or has object identity in comparison, and in the case of SOA the fields may not even be adjacent in memory which poses further challenges. And you don't necessarily want the above issues to be fully transparent either, given that you obviously must care about performance.",
        "user": "UHDQ62M4P",
        "ts": "1566872812.469400",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566688846.441800",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "c839bdf2-5f80-4352-958b-63b18ba791bb",
        "type": "message",
        "text": "Yes I agree lifetime is another gnarly issue related to this. It is one of the other implementation details often implied by the schema definition. I don't think C++\/Rust have really explored everything though. While a simple lifetime policy that works for business models is 'anything reachable is alive' (Python, Java, etc.) it leads to the generally slower GC model. We do have to care about performance, the question is whether the performance related details can be separated from the business logic. Which is why I'm looking for other examples.",
        "user": "U8A5MS6R1",
        "ts": "1566881776.469600",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh Chaturvedi",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566688846.441800",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "1d4c9e55-a8db-4a08-b3df-34c4b9e597ea",
        "type": "message",
        "text": "I don't think you can. But lifetimes being part of the business logic is actually kind of nice. Who really \"owns\" data? What business do you have looking at data that was owned after the parent has died?",
        "user": "UHDQ62M4P",
        "ts": "1566883089.469800",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566688846.441800",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "5b5c3fe4-1424-416f-bef9-275c019f943a",
        "type": "message",
        "text": "Unity has more than 2000 employees, so they are between Autocad and JetBrains, certainly in the top 10 pure tools companies.",
        "user": "UEQ6M68H0",
        "ts": "1566885060.470000",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566673857.433900",
        "parent_user_id": "UJN1TAYEQ"
    }
]