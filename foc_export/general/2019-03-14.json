[
    {
        "client_msg_id": "c0834c01-42c4-4afe-ada3-68d4db01bfc2",
        "type": "message",
        "text": "What languages \/ libraries \/ frameworks would you use to implement your future of coding vision and why?",
        "user": "UAL7940NM",
        "ts": "1552547395.317600",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "43873346f949",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-13\/399377633206_43873346f949174e340e_72.jpg",
            "first_name": "Felix",
            "real_name": "Felix Kohlgrüber",
            "display_name": "Felix Kohlgrüber",
            "team": "T5TCAFTA9",
            "name": "felix.kohlgrueber",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1552547395.317600",
        "reply_count": 12,
        "reply_users_count": 8,
        "latest_reply": "1553113446.401000",
        "reply_users": [
            "UAL7940NM",
            "UBN9AFS0N",
            "UE6EFEPTQ",
            "U79HM6726",
            "UGT2XN01W",
            "UC2A2ARPT",
            "UAVCC2X70",
            "U6KQ2S410"
        ],
        "replies": [
            {
                "user": "UAL7940NM",
                "ts": "1552549523.317800"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1552553096.318000"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1552557058.318400"
            },
            {
                "user": "U79HM6726",
                "ts": "1552564722.318600"
            },
            {
                "user": "UGT2XN01W",
                "ts": "1552578498.320300"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1552580057.320600"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1552584900.332400"
            },
            {
                "user": "U6KQ2S410",
                "ts": "1553105501.398700"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1553106134.398900"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1553106155.399100"
            },
            {
                "user": "UGT2XN01W",
                "ts": "1553108717.399300"
            },
            {
                "user": "U6KQ2S410",
                "ts": "1553113446.401000"
            }
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "a15952e8-099a-4912-8b24-a2ff590d40cb",
        "type": "message",
        "text": "I'm still not sure myself. Targeting web browsers seems to be a good idea because they provide flexible ui and \"apps\" that work without installing locally. I've previously failed creating a project with Vue.js and don't feel comfortable using JavaScript. Languages that compile to JS would probably be an alternative. I'm currently thinking about using Rust (compiled to wasm) + the stdweb crate for the next project. Does anyone have experience here already?",
        "user": "UAL7940NM",
        "ts": "1552549523.317800",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "43873346f949",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-13\/399377633206_43873346f949174e340e_72.jpg",
            "first_name": "Felix",
            "real_name": "Felix Kohlgrüber",
            "display_name": "Felix Kohlgrüber",
            "team": "T5TCAFTA9",
            "name": "felix.kohlgrueber",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1552547395.317600",
        "parent_user_id": "UAL7940NM"
    },
    {
        "client_msg_id": "90c41009-2b58-4b6c-a79e-481b2a43acb8",
        "type": "message",
        "text": "when webassembly gets support for GC (in the roadmap) I think anything that compiles to webassembly will be a good choince",
        "user": "UBN9AFS0N",
        "ts": "1552553096.318000",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1552547395.317600",
        "parent_user_id": "UAL7940NM"
    },
    {
        "client_msg_id": "7f57261a-43c3-4f4b-a660-cbf85b0588f2",
        "type": "message",
        "text": "C. I've tried all the others. C.",
        "user": "UE6EFEPTQ",
        "ts": "1552557058.318400",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1552547395.317600",
        "parent_user_id": "UAL7940NM",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UBUFWBGNN"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "a1134ec0-226e-4599-8f8f-dad941859bb3",
        "type": "message",
        "text": "Haskell.\n\nFor me part of the future of coding vision is Live programming, and I believe that an important part of it is distinguishing between pure computation and side-effects. More on that in: <https:\/\/www.youtube.com\/watch?v=skhP6LcbRTs>\n\nMe and <@U78TZ437S> have been discussing the future of coding ever since <@U6KQ2S410>’s first Subtext demos at 2005. In 2008 <@U78TZ437S> told me about Haskell and how it makes this important distinction that we have decided is crucial. So we use Haskell both because it does things “the right way” and we believe that’s productive but also because familiarity with something similar to what we’re striving to make is very important :slightly_smiling_face:",
        "user": "U79HM6726",
        "ts": "1552564722.318600",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4ac39488e9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/24ac39488e9c4f2833d087a1343707dc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Yair Chuchem",
            "display_name": "yairchu",
            "team": "T5TCAFTA9",
            "name": "yairchu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "edited": {
            "user": "U79HM6726",
            "ts": "1552564778.000000"
        },
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Scaling the REPL Experience",
                "title_link": "https:\/\/www.youtube.com\/watch?v=skhP6LcbRTs",
                "author_name": "Lamdu",
                "author_link": "https:\/\/www.youtube.com\/channel\/UCgvPEOFglvS4_ZEHi-PEctQ",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/skhP6LcbRTs\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Scaling the REPL Experience",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/skhP6LcbRTs?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/www.youtube.com\/watch?v=skhP6LcbRTs",
                "service_icon": "https:\/\/a.slack-edge.com\/2089\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=skhP6LcbRTs"
            }
        ],
        "thread_ts": "1552547395.317600",
        "parent_user_id": "UAL7940NM"
    },
    {
        "client_msg_id": "45b7417b-adea-4096-9768-596fe5db0484",
        "type": "message",
        "text": "<@UD512T5AT> IIUC that’s kind of similar to Unison’s current approach",
        "user": "U79HM6726",
        "ts": "1552564877.319100",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4ac39488e9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/24ac39488e9c4f2833d087a1343707dc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Yair Chuchem",
            "display_name": "yairchu",
            "team": "T5TCAFTA9",
            "name": "yairchu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1552233851.253900",
        "parent_user_id": "UAL7940NM"
    },
    {
        "client_msg_id": "7b72ef93-0553-4980-ba89-e11075b71097",
        "type": "message",
        "text": "<@UD512T5AT>\nI think you are right but it is also a potential disproof of the value of structure editing. This type of thing is quite easy to add to existing IDEs like Visual Studio but there aren't a lot of compelling use cases. What actually gets much easier with a non-textual ide? If I had such a use case, I would create myself a plugin!\n\nFor example, the most common \"extra UI\" you can pop up these days is for refactoring.\n\nThe simplest example might be Resharper bringing up a dialog box to rename all instances of an element.\n\nHowever, the standard VS method to do this inline as text is a bit slicker and lower mental overhead - it highlights the text you are renaming in a special way and then dynamically updates all the references as you type.\n\nSo :shrug: - I have plugins for visualizing code but I'm a little mixed on having them inside the IDE as yet-another-window. There are times that spinning them out into their own app makes them easier to use and compartmentalizes activities a bit better.",
        "user": "UFD2JRE58",
        "ts": "1552571184.319300",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ca63ca2aa38f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-01-20\/529811744742_ca63ca2aa38fa658cc4f_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Woods",
            "display_name": "duncanawoods",
            "team": "T5TCAFTA9",
            "name": "duncan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1552233851.253900",
        "parent_user_id": "UAL7940NM"
    },
    {
        "client_msg_id": "9fe2543b-2062-4550-abf1-8a34d86d3982",
        "type": "message",
        "text": "At our company we use F# and the SAFE stack  (<https:\/\/safe-stack.github.io\/>) as a pretty good compromise (F# is almost an OCaml dialect but runs on the .NET platform and can be crosscompiled to Javascript and there is a nice elm architecture like library to use react that way). So you get ADTs, immutability and non-nullability as defaults (but they are possible because both are used in the wider ecosystem), first class functions etc. It's not as principled as Haskell or Purescript but we feel it has a couple of very nice pragmatic points in it's favour (e.g. the size of the ecosystem, speed at which it can be learned etc)",
        "user": "UGT2XN01W",
        "ts": "1552578498.320300",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3405d9d5e0d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b3405d9d5e0d530832a9511b27c6974e.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "",
            "real_name": "Daniel Bachler",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "daniel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "title": "SAFE",
                "title_link": "https:\/\/safe-stack.github.io\/",
                "text": "An end-to-end, functional-first stack for cloud-ready web development that emphasizes type-safe programming",
                "fallback": "SAFE",
                "from_url": "https:\/\/safe-stack.github.io\/",
                "service_icon": "https:\/\/safe-stack.github.io\/favicon.ico",
                "service_name": "safe-stack.github.io",
                "id": 1,
                "original_url": "https:\/\/safe-stack.github.io\/"
            }
        ],
        "thread_ts": "1552547395.317600",
        "parent_user_id": "UAL7940NM",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U7C7B75R6"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "1d021ab1-5061-40d4-a21f-549aef607f46",
        "type": "message",
        "text": "I'm prototyping my thing in CoffeeScript — I want it to run in the browser, and CS has very minimal tooling, instantaneous build times, and all the stuff from JS I like with less of the stuff I don't.\n\nI'm loosely planning to write the 1.0 in ClojureScript — I want it to run in the browser, and CLJS is just such a robust, stable, reliable language.\n\nWASM doesn't buy me much because 90% of my perf budget is spent on rendering. I don't current have a WebGL render backend, but will add one at some point — though only if I can do it in a way that doesn't have a high energy cost (because this system runs on phones for long periods of time).\n\nNo libraries, no frameworks. I've been building highly interactive SPAs on my own JS stack for longer than React &amp; Angular have existed, and I haven't regretted it in the slightest.",
        "user": "UC2A2ARPT",
        "ts": "1552580057.320600",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1552580215.000000"
        },
        "thread_ts": "1552547395.317600",
        "parent_user_id": "UAL7940NM"
    },
    {
        "client_msg_id": "3371e4b2-2fa0-4aaf-ae74-f79b2147f603",
        "type": "message",
        "text": "Anyone have an opinion on implicit member access vs explicit? Or even better, seen any concrete research or reason for one over the other?\n\nWhat I mean is C++, Java, C#, Swift, etc when you're in a method you can access members of the current instance implicitly. You don't have to specify `this` or `self`\n\n```\nclass Rect {\n   int width;\n   int height;\n   int area() {\n      return width + height;  \/\/ implicit\n   }\n}\n```\n\nvs\n\n```\nclass Rect {\n   int width;\n   int height;\n   int area() {\n      return this.width + this.height; \/\/ explicit\n   }\n}\n```\n\nI feel like I prefer explicit over implicit. IMO it makes the code more readable since I can look at the only the line in question a little easier. In the implicit case when `area()` is defined many lines below I'd have no idea if `width` and `height` are variables in a more outer scope, global variables, or member variables. In the explicit case I immediately know they are member variables. That seems like a win. It also means one less argument over naming conventions. Microsoft use to use `m_variable`. Google uses `variable_`. That would all disappear if the language required explicitness like python and JavaScript for example.\n\nWhat are some negatives? I can see one being typing but if for all other reasons explicit is better than implicit then some language could just shorten the syntax. `_.height` for example.",
        "user": "UC6997THT",
        "ts": "1552584175.332300",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f3eb3ca69d86",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-13\/414472553296_f3eb3ca69d86feb77929_72.png",
            "first_name": "Gregg",
            "real_name": "Gregg Tavares",
            "display_name": "gman",
            "team": "T5TCAFTA9",
            "name": "slack1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1552584175.332300",
        "reply_count": 24,
        "reply_users_count": 8,
        "latest_reply": "1553278691.416600",
        "reply_users": [
            "UD6EXQVM0",
            "UGJ9KAZM3",
            "UAVCC2X70",
            "UA14TGLTC",
            "U85HCL7JP",
            "UEH6T3RJB",
            "U8A5MS6R1",
            "UEQ6M68H0"
        ],
        "replies": [
            {
                "user": "UD6EXQVM0",
                "ts": "1552591984.333100"
            },
            {
                "user": "UGJ9KAZM3",
                "ts": "1552596344.334200"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1552603889.335500"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1552608175.336000"
            },
            {
                "user": "UGJ9KAZM3",
                "ts": "1552611724.336900"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1552625015.338500"
            },
            {
                "user": "UGJ9KAZM3",
                "ts": "1552626723.340000"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1552627042.340500"
            },
            {
                "user": "UGJ9KAZM3",
                "ts": "1552627334.340700"
            },
            {
                "user": "UGJ9KAZM3",
                "ts": "1552627600.341400"
            },
            {
                "user": "U85HCL7JP",
                "ts": "1552628140.341600"
            },
            {
                "user": "UEH6T3RJB",
                "ts": "1552652196.342000"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1552681509.342300"
            },
            {
                "user": "UD6EXQVM0",
                "ts": "1552682967.342500"
            },
            {
                "user": "UEH6T3RJB",
                "ts": "1552691114.343000"
            },
            {
                "user": "UGJ9KAZM3",
                "ts": "1552693718.350600"
            },
            {
                "user": "UD6EXQVM0",
                "ts": "1552694080.350800"
            },
            {
                "user": "UEH6T3RJB",
                "ts": "1552771285.356400"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1552797305.357600"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1552843737.360000"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1552892903.361500"
            },
            {
                "user": "UEH6T3RJB",
                "ts": "1552920483.361700"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1552924297.364500"
            },
            {
                "user": "UD6EXQVM0",
                "ts": "1553278691.416600"
            }
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "cf4dfd87-a0a8-4b55-b27b-3a1322c216fb",
        "type": "message",
        "text": "Part of my vision is that the \"language\" that code is written in, is defined by the code itself (e.g. by an interpreter or compiler or UI tool embedded within the very code it is editing or viewing or generating).\n\nJavaScript is a great fit for this because it's already heavily centered around the kinds of building blocks that I think are ideal for this. Also, that means my tool can be bootstrapped into any browser from the console.\n\nI actually talked about this a bit more in a previous post:\n\n<https:\/\/futureofcoding.slack.com\/archives\/CCL5VVBAN\/p1552529707088600?thread_ts=1552463735.064500&amp;cid=CCL5VVBAN>",
        "user": "UAVCC2X70",
        "ts": "1552584900.332400",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1552587023.000000"
        },
        "attachments": [
            {
                "from_url": "https:\/\/futureofcoding.slack.com\/archives\/CCL5VVBAN\/p1552529707088600?thread_ts=1552463735.064500&amp;cid=CCL5VVBAN",
                "fallback": "[March 13th, 2019 7:15 PM] dcook0819: ... That being said though, I personally would find it simpler to just use a dynamic\/generic data structure, like dictionaries and lists; or a dynamic language where that's the norm to begin with. That's a major part of why I'm using JavaScript for my universal-software-tool project. I find that highly preferable to creating a generalizable representation in a statically typed language -- but that's also my general language preference speaking :)\n\nIf you put the structure choice aside though (e.g. Loyc versus JSON), the idea of finding a general representation of code is definitely something that relates to what I'm doing, and for that matter, I think Loyc had identified the right components (identifies, values, need structure, attributes \/ meta, and all operations represented as \"calls\") ... And that's a topic\/space that might actually be worth it's own focus \/ collaboration, because I'm sure it's something that multiple of us are exploring",
                "ts": "1552529707.088600",
                "author_id": "UAVCC2X70",
                "author_subname": "Dan Cook",
                "channel_id": "CCL5VVBAN",
                "channel_name": "feedback",
                "is_msg_unfurl": true,
                "is_reply_unfurl": true,
                "text": "... That being said though, I personally would find it simpler to just use a dynamic\/generic data structure, like dictionaries and lists; or a dynamic language where that's the norm to begin with. That's a major part of why I'm using JavaScript for my universal-software-tool project. I find that highly preferable to creating a generalizable representation in a statically typed language -- but that's also my general language preference speaking :)\n\nIf you put the structure choice aside though (e.g. Loyc versus JSON), the idea of finding a general representation of code is definitely something that relates to what I'm doing, and for that matter, I think Loyc had identified the right components (identifies, values, need structure, attributes \/ meta, and all operations represented as \"calls\") ... And that's a topic\/space that might actually be worth it's own focus \/ collaboration, because I'm sure it's something that multiple of us are exploring",
                "author_name": "Dan Cook",
                "author_link": "https:\/\/futureofcoding.slack.com\/team\/UAVCC2X70",
                "author_icon": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_48.jpg",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https:\/\/futureofcoding.slack.com\/archives\/CCL5VVBAN\/p1552529707088600?thread_ts=1552463735.064500&amp;cid=CCL5VVBAN",
                "footer": "From a thread in #feedback"
            }
        ],
        "thread_ts": "1552547395.317600",
        "parent_user_id": "UAL7940NM",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "U8A5MS6R1"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "76e12fb2-d66b-4f12-97eb-14b5afb43cb5",
        "type": "message",
        "text": "I believe implicit access is better, because I think singletons and global variables are rarely the best design decision.\n\nIt's a pit of success thing: in general, the \"likely right\" way of doing things should be easier than the \"likely wrong\" way. If you decide that globals can be accessed unqualified but member variables must be qualified with \"this.\", you're encouraging global variables. Plus, I hate writing `this.` a lot, so you'll catch me writing `let foo = this.foo` in JS which just adds noise.\n\nInstead I'd propose that globals should be specially qualified instead. Ruby's convention of qualifying both `$globals` and `@members` is good too. And it doesn't necessarily have to be the programmer doing the qualification - the editor could colorize or add a sigil to indicate the scope instead.",
        "user": "UD6EXQVM0",
        "ts": "1552591984.333100",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4a9957508aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "David Piepgrass",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "qwertie256",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "edited": {
            "user": "UD6EXQVM0",
            "ts": "1552592733.000000"
        },
        "thread_ts": "1552584175.332300",
        "parent_user_id": "UC6997THT"
    },
    {
        "client_msg_id": "a39f6322-a56c-48e6-8838-eefd8722d72b",
        "type": "message",
        "text": "I prefer explicit (and my first love of 17 years is C++).\nIt means that the model of the language is simpler in my head and thus I need to load less context in my head; this means I have more working mind-space for conceptual things over syntactic\/technical details.\nIt's not just globals but also function arguments and scope variables one needs to care about. With explicit `this.` one doesn't need to think.\nCode is written less often than it is read, and I believe this applies even when I'm working on the codebase alone. I'm not a poor typist.",
        "user": "UGJ9KAZM3",
        "ts": "1552596344.334200",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a9ca5b79893e",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-05\/567982344725_a9ca5b79893ede5381e5_72.jpg",
            "first_name": "Iridian",
            "real_name": "Iridian Kiiskinen",
            "display_name": "Iridian",
            "team": "T5TCAFTA9",
            "name": "iridian",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "edited": {
            "user": "UGJ9KAZM3",
            "ts": "1552596406.000000"
        },
        "thread_ts": "1552584175.332300",
        "parent_user_id": "UC6997THT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U79HM6726"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "c43009ec-f4da-467e-8c37-086b2df7a6f7",
        "type": "message",
        "text": "<@UFD2JRE58> One potential target is for using multiple languages. Let's say you are building HTML with JS. How do you offer all the HTML candies for HTML and JS candies for JS when they are side by side without creating completely new monster like JSX. Such things is not maybe super common it's good to think how does it effect on development when mixing languages is easy? For example having general purpose macro language and commenting semantics would be nice.\n\nHowever I am mostly considering structural editing as base for more powerful end-user GUI:s at first. Developing GUI:s is huge time sink and for complex problems having text inputs, checkboxes and selections is simply way too limited.",
        "user": "U7C7B75R6",
        "ts": "1552600260.334600",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "be27878783b4",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-04-10\/604262911488_be27878783b4b23a5ed4_72.png",
            "first_name": "",
            "real_name": "Niko Autio",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "niko.elmari",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1552233851.253900",
        "parent_user_id": "UAL7940NM"
    },
    {
        "client_msg_id": "37b8ad2d-2c10-4e79-9cd5-1cd485a00f87",
        "type": "message",
        "text": "In JavaScript, I avoid using this, new, and class as much as possible, because there are issues with them. Instead I use function-constructors, and the \"members\" are either the function arguments, or vars declared inside of it. These are accessed directly (without this. ) because they are captured in the closure.\n <https:\/\/www.youtube.com\/embed\/DePE0ffiMf4>",
        "user": "UAVCC2X70",
        "ts": "1552603889.335500",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1552604032.000000"
        },
        "thread_ts": "1552584175.332300",
        "parent_user_id": "UC6997THT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UGJ9KAZM3"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "416974f4-fda6-4993-8ceb-2a68cda537dc",
        "type": "message",
        "text": "Slapping on a structured editor on top the existing languages will only have limited benefit - this is because the current languages are designed from a completely different mindset. It would be much nicer to have a top-to-bottom redesign where the UI and tooling isn't designed after the syntax and semantics, but they are in fact all designed holistically. E.g. we can't slap on an 'excel view' onto Python. Any view cannot escape from the Python-ness of the concepts you're working with. I agree strongly with <@UC21F8Q48> - it's not the structure but that the *medium* you use to interact is itself more powerful. Not sure this makes sense but I see the static-document nature of the programming medium as something that we need to look beyond.",
        "user": "U8A5MS6R1",
        "ts": "1552604536.335800",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh Chaturvedi",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1552233851.253900",
        "parent_user_id": "UAL7940NM"
    },
    {
        "client_msg_id": "aff9107c-caf2-464f-8235-63a85af21d30",
        "type": "message",
        "text": "When I first started, I worried about these design details quite a bit, now I don't so much.  Just so used to flipping.  Sometimes explicit gets tedious.  Sometimes implicit gets ambiguous.",
        "user": "UA14TGLTC",
        "ts": "1552608175.336000",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1552584175.332300",
        "parent_user_id": "UC6997THT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "3d3f4f3e-c5f4-41c6-9c50-ef0d5de0e3d5",
        "type": "message",
        "text": "Dan Cook, I was actually just thinking about how exactly closures are an argument in favor of explicit member access (in the cases where one actually does choose to use 'this' and related OO patterns, that is).\n\nClosures make the, uhh.. 'identity' of identifiers even more pronounced: they are no longer just handy convenience aliases or transient temporary variables, but a central building block of the closure semantics, if you will.\n\nThis in turn means that it's even more important that the semantics of the identifiers themselves be both as simple and as explicit as possible.\n\nAnd I feel like the implicit 'this' actually adds complexity here instead of reducing it. It extends the two categories of unqualified identifiers (the lexical local\/param and ideally-lexical global scopes) with a third one: member access (which might not even be lexical if the language has dynamic typing).\n\nIn order to reduce the complexity back to two categories in ones mind one has to both 1. imagine the implicit lexical 'this.' there and 2. be convinced that the implicit lexical this in the language is actually semantically identical to the other lexical constructs, which it might not be.\n\nHaving the 'this.' be explicit in the first place removes both of these extra burdens: \"'this' is just a function parameter of the surrounding 'method' and gets captured the exact same way as other parameters\"",
        "user": "UGJ9KAZM3",
        "ts": "1552611724.336900",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a9ca5b79893e",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-05\/567982344725_a9ca5b79893ede5381e5_72.jpg",
            "first_name": "Iridian",
            "real_name": "Iridian Kiiskinen",
            "display_name": "Iridian",
            "team": "T5TCAFTA9",
            "name": "iridian",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "edited": {
            "user": "UGJ9KAZM3",
            "ts": "1552611853.000000"
        },
        "thread_ts": "1552584175.332300",
        "parent_user_id": "UC6997THT"
    },
    {
        "client_msg_id": "22b89717-70dd-42f7-b012-cf95a38057e1",
        "type": "message",
        "text": "My conception of this structure editor plugin goes beyond the editing mechanics. I guess I’m really imagining a full IDE-like GUI overlay with editor services acting on the syntax tree getting structure-edited. As <@UC21F8Q48> was describing, this could be a richer medium in which the results of editor services interspersed with the code being written. Maybe this isn’t quite possible with today’s plugin architectures (could you do this in Glamorous Toolkit? haven’t looked into it much). But if you could (which sounds feasible both technically and culturally given editor trends over the past ten years), then you could have a rich medium of interaction but still rely on existing text-based tooling for persistence and version control. <@U8A5MS6R1> I agree that you’re fundamentally limited by the underlying language and that there would be benefit in designing languages from the ground up with the UI in mind, but I don’t see why those richer interaction mediums have to be at odds with current VC tooling. Maybe I’m missing a point\/example here.",
        "user": "UD512T5AT",
        "ts": "1552614248.337800",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3f471057576c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-06-02\/652395123492_3f471057576c27bcd486_72.jpg",
            "first_name": "David",
            "real_name": "David Moon",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dmoon1221",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1552233851.253900",
        "parent_user_id": "UAL7940NM"
    },
    {
        "client_msg_id": "8215f183-9402-480d-8e89-d7ec733e21c3",
        "type": "message",
        "text": "<@UD512T5AT> - you can decompose the idea of a program into 'language + UI views'. But this presumes you have an underlying language. Instead, a deeper redesign would be 'model + UI views'. Here text could be used as a serialization format for the model, but being a serialization format it may not be readable. Instead you'd always want to look at the model through the UI views. As an example consider if we had to fit spreadsheets into git (with fine grained versioning of cells). You'd want to preserve identity of elements across versions in any decent structural editor.\n\nSo it's not at odds, and can be made to work but there's an impedance mismatch. You can still use git, by reducing to a versioned key value store. So 'git log' may be useful but 'git diff' or browsing the repo in github would be meaningless since you are looking at some serialization of a model where the optimum view isn't text lines.",
        "user": "U8A5MS6R1",
        "ts": "1552622557.338000",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh Chaturvedi",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1552233851.253900",
        "parent_user_id": "UAL7940NM"
    },
    {
        "client_msg_id": "0dececac-e32f-46fe-ad2b-4469e1efa48a",
        "type": "message",
        "text": "Related thread: <https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1548964100778700?thread_ts=1548823279.730200&amp;cid=C5T9GPWFL>",
        "user": "U8A5MS6R1",
        "ts": "1552622769.338200",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh Chaturvedi",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "from_url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1548964100778700?thread_ts=1548823279.730200&amp;cid=C5T9GPWFL",
                "fallback": "[January 31st, 2019 11:48 AM] ivanreese: If you want git, and you want diff, all you need is a way to save your VPL program as a text file. Existing visual languages already do this — most of them use JSON.\n\nNothing new needs to be invented to solve this problem. (Go ahead and invent new stuff to make this better — just don't let this \"VPLs don't work with text tools like git\/diff\" argument stand unopposed.)",
                "ts": "1548964100.778700",
                "author_id": "UC2A2ARPT",
                "author_subname": "Ivan Reese",
                "channel_id": "C5T9GPWFL",
                "channel_name": "general",
                "is_msg_unfurl": true,
                "is_reply_unfurl": true,
                "text": "If you want git, and you want diff, all you need is a way to save your VPL program as a text file. Existing visual languages already do this — most of them use JSON.\n\nNothing new needs to be invented to solve this problem. (Go ahead and invent new stuff to make this better — just don't let this \"VPLs don't work with text tools like git\/diff\" argument stand unopposed.)",
                "author_name": "Ivan Reese",
                "author_link": "https:\/\/futureofcoding.slack.com\/team\/UC2A2ARPT",
                "author_icon": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F00b63%2Fimg%2Favatars%2Fava_0013-48.png",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1548964100778700?thread_ts=1548823279.730200&amp;cid=C5T9GPWFL",
                "footer": "From a thread in #general"
            }
        ],
        "thread_ts": "1552233851.253900",
        "parent_user_id": "UAL7940NM"
    },
    {
        "client_msg_id": "a063c22f-980d-4bbb-86c4-e1da9b47d07f",
        "type": "message",
        "text": "<@UGJ9KAZM3> - That makes perfect sense in a class-based language, i.e. where \"x\" is really just a shorthand for \"this.x\".\n\nHowever, JavaScript does not have *actual* classes, and \"x\" and \"this.x\" always mean different things. So when you choose to use \"this\", then you must *always* say \"this.x\".\n\nThe usage of closures I described does not have any \"this\" at all, not even an implicit one. And it doesn't extend the categories, it reduces them: it's essentially throwing out member access altogether, and instead accessing everything directly through lexical scope -- not something else that can be *confused with* lexical scope, but actual lexical scope to begin with.\n\nIt's no different than referring to \"x\" in:\n```function foo(x) {\n   ...\n   return x;\n}```\nThat \"x\" is not short for \"foo.x\". There isn't a \"this\" that holds x, it's just the x in the current lexical scope. And you're not going to confuse the x in foo(123) with the x in foo(456), because both calls create a different \"instance\" of that scope.\n\nClosures are about holding onto values in that scope, rather than attaching them to some \"this\" object. For example:\n```function plus(x) {\n   return function(y) {\n      return x + y;\n   }\n}\n\nvar plus2 = plus(2);\nvar plus4 = plus(4);\n\nplus2(5); \/\/ result is 7\nplus4(5); \/\/ result is 9```\nPlus takes some x, and returns a function that adds that x to some y. Each call to plus activates a new \"instance\" of that scope, with its own value for x, and returns a *new* function that uses *that* x.\n\nWhen you want to create multiple functions for one set values, you can return an object that has them as properties. This might be where it gets confusing, because it *looks* like member access:\n```function foo(x, y) {\n   function sum() { return x + y; }\n   function diff() { return x - y; }\n   function inc() { x = x + 1; }\n   return { sum, diff, inc };\n}\n\nvar a = foo(1,2);\nvar b = foo(3,4);\na.sum(); a.diff(); \/\/ 3, -1\nb.sum(); b.diff(); \/\/ 7, -1\na.inc();\na.sum(); a.diff(); \/\/ 4, 0\nb.sum(); b.diff(); \/\/ 7, -1```",
        "user": "UAVCC2X70",
        "ts": "1552625015.338500",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1552626926.000000"
        },
        "thread_ts": "1552584175.332300",
        "parent_user_id": "UC6997THT"
    },
    {
        "client_msg_id": "08d80d05-8f72-46c7-948a-4b9e9a5d6137",
        "type": "message",
        "text": "<@UAVCC2X70> just to avoid confusion, I wasn't extending or responding to your thought per se (the same way you weren't responding to the original, which had the premise \"this exists, implicit or explicit?\", which you subverted \"I don't use this, so neither\").\nI was just noticing the funny coincidence about us both thinking about closures from different angles. So there's a high chance we're talking across each other.\n\nMy point was this and only this: if one uses closures in conjunction with a class system, then explicit \"this.\" avoids madness, while implicit \"this.\" would invite madness.\n\nI was explicitly not commenting whether class system should be avoided, it's a bit orthogonal to the original question.\n\nOn that topic, about JavaScript and classes, while you're naturally correct in that javascript doesn't have native classes but only runtime prototyping, I genuinely don't think that the difference to languages with native class semantics is that big.\n\nThis is especially true now with ES6 which offers a default easy-mode boilerplate solution for classes, but I think this was true even on earlier iterations given the assumption that the boilerplating was done consistently.\n\nI mean, even in C++ the runtime semantics of classes are really not much more than dynamic dispatch plus a hidden zeroth 'this' argument. And javascript as natively dynamically typed language naturally has dynamic dispatch natively. So runtime behaviour is the same...\n\nAnd what comes to static typing etc., on whether dynamic typed language constructs compare to statically typed language constructs, well, that's a completely different discussion and outside the scope of this thread, I feel. :wink:",
        "user": "UGJ9KAZM3",
        "ts": "1552626723.340000",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a9ca5b79893e",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-05\/567982344725_a9ca5b79893ede5381e5_72.jpg",
            "first_name": "Iridian",
            "real_name": "Iridian Kiiskinen",
            "display_name": "Iridian",
            "team": "T5TCAFTA9",
            "name": "iridian",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "edited": {
            "user": "UGJ9KAZM3",
            "ts": "1552626804.000000"
        },
        "thread_ts": "1552584175.332300",
        "parent_user_id": "UC6997THT"
    },
    {
        "client_msg_id": "a26aa628-c051-46d4-b6e6-f1e3350f80c2",
        "type": "message",
        "text": "Ah, you are correct! I indeed thought you *were* commenting about my reply, which made me think you didn't understand what I meant about closures in JavaScript.\n\nYeah, maybe this has gotten a bit scattered for that reason :P ... But hey, now we have disambiguated between the different \"scopes\" we were speaking within.\n\nMaybe if we had only just put \"this.\" before our separate comments, it would have been clear which contexts our comments were referring to :wink:",
        "user": "UAVCC2X70",
        "ts": "1552627042.340500",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1552627391.000000"
        },
        "thread_ts": "1552584175.332300",
        "parent_user_id": "UC6997THT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UGJ9KAZM3"
                ],
                "count": 1
            },
            {
                "name": "smile",
                "users": [
                    "UGJ9KAZM3"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "457fe92f-b2f9-4e59-83ba-ca9964189d07",
        "type": "message",
        "text": "But actually on that note: do you know if there are languages which actually have implicit \"this\" _and_ fully-developed closures? My experience is mostly limited to C++ and JS, and C++ only has the rather constrainted and clunky lambdas. So neither counts.",
        "user": "UGJ9KAZM3",
        "ts": "1552627334.340700",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a9ca5b79893e",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-05\/567982344725_a9ca5b79893ede5381e5_72.jpg",
            "first_name": "Iridian",
            "real_name": "Iridian Kiiskinen",
            "display_name": "Iridian",
            "team": "T5TCAFTA9",
            "name": "iridian",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "edited": {
            "user": "UGJ9KAZM3",
            "ts": "1552627349.000000"
        },
        "thread_ts": "1552584175.332300",
        "parent_user_id": "UC6997THT"
    },
    {
        "client_msg_id": "5dfd0adf-0393-4400-976c-55e4266a9c99",
        "type": "message",
        "text": "Heh. Seems like Swift has both closures and implicit 'self'... except when used together: inside closures you need to use 'self' explicitly all the time.",
        "user": "UGJ9KAZM3",
        "ts": "1552627600.341400",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a9ca5b79893e",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-05\/567982344725_a9ca5b79893ede5381e5_72.jpg",
            "first_name": "Iridian",
            "real_name": "Iridian Kiiskinen",
            "display_name": "Iridian",
            "team": "T5TCAFTA9",
            "name": "iridian",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1552584175.332300",
        "parent_user_id": "UC6997THT"
    },
    {
        "client_msg_id": "f62f7326-65a5-4591-a5c7-e5e3d0820eae",
        "type": "message",
        "text": "What if the IDE\/editor could label the variables: local\/method parameter\/class\/global and keep them with the same syntax. I think is a win in case you want to change the code, having to rewrite less. And delegating it to a process made automatically by the computer and not by a human.",
        "user": "U85HCL7JP",
        "ts": "1552628140.341600",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e6db0e9dd5fe",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-02-15\/956131187863_e6db0e9dd5fe2e3b9df2_72.jpg",
            "first_name": "",
            "real_name": "Daniel Garcia",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "daniel.garcia.carmona",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1552584175.332300",
        "parent_user_id": "UC6997THT",
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    }
]